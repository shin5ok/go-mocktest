// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/domain.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "foobar/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MockUserInterface) GetInfo(arg0 string) []domain.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0)
	ret0, _ := ret[0].([]domain.UserInfo)
	return ret0
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUserInterfaceMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUserInterface)(nil).GetInfo), arg0)
}

// SetInfo mocks base method.
func (m *MockUserInterface) SetInfo(arg0 domain.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockUserInterfaceMockRecorder) SetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockUserInterface)(nil).SetInfo), arg0)
}
